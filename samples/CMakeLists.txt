cmake_minimum_required(VERSION 3.11)

project(Samples LANGUAGES CXX)

if(APPLE)
    list(APPEND SAMPLES_COMPILE_DEFINITION -DRIF_USE_METAL=1)
    message(">> Building RadeonProImageProcessing to use metal backend")
endif()

list(APPEND SAMPLES_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/./")
list(APPEND SAMPLES_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/ImageTools/")
list(APPEND SAMPLES_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/../include/")

list(APPEND SAMPLES_INCLUDE_LIB RadeonImageFilters)

if(WIN32)
    list(APPEND SAMPLES_COMPILE_DEFINITION -DWIN32)
    list(APPEND SAMPLES_COMPILE_DEFINITION -D_CRT_SECURE_NO_WARNINGS)
    
    add_compile_options("/MP")
elseif(APPLE)
    add_compile_options("-fvisibility=hidden") 
    add_compile_options("-std=c++11") 
    add_compile_options("-fPIC") 
else()
    add_compile_options("-fvisibility=hidden") 
    add_compile_options("-std=c++14") 
    add_compile_options("-fPIC")
endif()

if(WIN32)
    list(APPEND SAMPLES_INCLUDE_LIB opengl32)
	list(APPEND RIF_LIB_PATH "../../Windows")
elseif(APPLE)
    link_libraries("-framework OpenCL")	
    link_libraries("-framework Cocoa")
    link_libraries("-framework OpenGL")
    link_libraries("-framework IOKit")
	list(APPEND RIF_LIB_PATH "../../OSX")
else()
    list(APPEND SAMPLES_INCLUDE_LIB GL)
    list(APPEND SAMPLES_INCLUDE_LIB pthread)
    list(APPEND SAMPLES_INCLUDE_LIB dl)
	list(APPEND RIF_LIB_PATH "../../Ubuntu18")
endif()

include_directories(${SAMPLES_INCLUDE_DIR})
add_definitions(${SAMPLES_COMPILE_DEFINITION})
link_libraries(${SAMPLES_INCLUDE_LIB})
add_link_options(${SAMPLES_LINK_OPTIONS})

function(rif_add_sample SAMPLE_NAME)
    project(${SAMPLE_NAME} LANGUAGES CXX)
    set(SOURCE ${PROJECT_SOURCE_DIR}/main.cpp)
    add_executable(${PROJECT_NAME} ${SOURCE})
    target_link_directories(${PROJECT_NAME} PRIVATE ${RIF_LIB_PATH})
endfunction(rif_add_sample)

add_subdirectory(MLAA)
add_subdirectory(GaussianBlur)
add_subdirectory(ToneMapping)
add_subdirectory(EdgeDetection)
add_subdirectory(MedianDenoise)
add_subdirectory(UserDefined)
add_subdirectory(Denoisers)
add_subdirectory(PhotoToneMapping)
add_subdirectory(Bloom)
add_subdirectory(AIDenoiser)
add_subdirectory(OpenImageDenoiser)
